Change log
==========

2.4.0 (2021-01-13)
------------------

- ABAP CHARnn fields sent to Node, get cut off after the first zero byte; fix #193 b4aeaf9
- Node strings sent to ABAP CHARnn fields, get cut out after the first zero byte d7f516b
- CMakeLists SDK version output ccaddd4
- N-API version 6 fixed d395ad0

2.3.1 (2020-11-18)
------------------

- Pool acquire() error message for wrong user credentials; fix #185 54a82b6
- Connection parameters error messages and unit tests; 55c3e02

2.3.0 (2020-10-26)
------------------

- NAPI v7
- The client parameter set to optional in RfcConnectionParameters interface 8e7bb8f
- setIniFileDirectory method added at addon level, to set the sapnwrfc.ini file directory 85ec105

2.2.0 (2020-10-13)
------------------

- Client setIniPath method added, exposing NWRFC SDK method RfcSetIniPath:
  https://github.com/SAP/node-rfc/blob/master/doc/api.md#setIniPath
- Linux binary built on NodeJS toolchain based on Centos:
  https://github.com/SAP/fundamental-tools/blob/master/docker/centos.Dockerfile
- RFM table typing extended with Array of variables 1becb1d
- RFM call templates: https://www.npmjs.com/package/rfmcall
- Server bindings (experimental)

2.1.0 (2020-08-10)
------------------

- CLA replaced with DCO, FSFE Reuse compliance 28a4ef5
- README added: the installation and build from source work for NodeJS versions with N-API >= 6; fix #162 cda585c
- NWRFC SDK Server API exposed dcc6b83
- Fix error TS2741 closes #164 82be406


2.0.3 (2020-07-27)
------------------

- Environment object appended to error message when SAP NWRFC SDK not found or can't be loaded
- Accidentally added p-queue dependency removed
- Segfault when more Pool more connections requested than available as `ready` and at least 1 is available

2.0.2 (2020-07-21)
------------------

- CMake 3.18
- CXX standard 17
- Fix #151 wrapString fatal error (core dumped)
- Fix #158 Fatal error: Error getting v8 handle scope

2.0.1 (2020-07-20)
------------------

- CMakeLists.txt `--force-local` removed: pr#154

2.0.0 (2020-07-20)
------------------

- Connection Pool ported to C++
- Error handling improvements, rfmPath
- New documentation content and format ported from reStructuredText to markdown
- environment object
- node 6 and 8 support expired
- Connection attribute PartnerIPv6 added
- SAP NWRFC SDK post-installation fix for macOS removed
- Cmake version 3.17
- N-API version 6
- N-API version from package.json used in CMakeLists.txt, instead of separately (double) maintained one
- tslint replaced by eslint

Breaking changes

1. Managed clients' can't open and close own connections any more. Instead of open() and close(),
managed clients use pool acquire() and release() methods. Delegation of these tasks to Pool,
ensures the connection handle stability during the Client instance lifecycle (less or not at all RFC_INVALID_HANDLE errors)
and more intuitive error messages, like RFM call() over closed connection instead of generic RFC_INVALID_HANDLE error.

2. After critical errors, the client connection handle is set to NULL, consequently setting the alive property to false.
The alive property now exposes the connection handle != NULL condition, thus always in sync. The automatic re-open should
assign the new connection handle to client, setting the alive to true: see Closing connections.

3. Client reopen() method removed

4. Client ping() method result returned as a second callback parameter (callback pattern), error is the first

5. Client getters:
    - status and runningRFCCalls removed
    - isAlive replaced with alive
    - _connectionHandle replaced with connectionHandle
    - version replaced with more generic environment object, exposing:
        - os platform name, architecture, release
        - node, napi, modules etc. versions (process.versions)
        - SAPNWRFC_HOME and RFC_INI environment variables

6. The ongoing RFC call is not any more protected from connection close() by direct client.
   The direct clients should not call the close() method before the RFM call completed and
   invoke() or call() callback invoked.

7. Error handling improvements:
    - All error objects have now a name property, defining the error type
    - Error location path (rfm/parameter/field) attached to error objects, property rfmPath

1.2.0 (2020-04-20)
------------------

* Connection re-open after critical server errors
* Error code string representation added to error object
* Pool improvements

1.1.0 (2020-04-14)
------------------

* Safeguarding from closing the connection while RFC calls still running
* Number of running RFC calls exposed as client instance attribute
* Client logging
* Installation with NODE_ENV=production, fix #122
* Warnings when compiling for Windows IA32 platform, fix  #131
* Ensure Bluebird Promises used instead of native Typescript, fix #134
* Pool reopen() fixed, returning now the Client instance, just like Pool open(), fix #135
* Pool max option removed, fix #136
* Unit tests refactoring


1.0.6 (2020-03-31)
------------------

* Connection Info update for PL6 e55783f #128
* Concurrent locking fix for ConnectionInfo() c5a443b #128
* Concurrent locking fix for invoke() and ping() 9cebb9a #128
* Security audit fix by dependencies update; fixes #129
* rstrip removed, always true
* Throughput monitoring: number of calls, bytes sent/received, application/total time; SAP NWRFC SDK >= 7.53 required
* UTCLONG ABAP datatype support; SAP NWRFC SDK >= 7.54 required

1.0.5 (2020-03-09)
------------------

* Windows 32 bit build enabled in build script, fix #124
* .vscode added to .gitignore
* README
* NVM dependency removed from Make script
* Documentation, fix #120

1.0.3 (2019-11-14)
------------------

* Windows build options and warning clean-up
* VERSION file removed

1.0.2 (2019-11-11)
------------------

* Ping confirms the connection handle validity
* Unit tests for ABAP errors
* CI scripts: SAP NWRFC SDK version, NodeJS version manager
* INT1 and INT2 overflow check
* Input parameter array check added, fix #100
* Connection options support in Connection Pool, fix #104

1.0.1 (2019-10-09)
------------------

* Min NodeJS version fixed in package.json, per https://nodejs.org/dist/latest/docs/api/n-api.html#n_api_n_api_version_matrix
* README: N-API badge added
* ABAP decimal floating point data types added: RFCTYPE_DECF16 and RFCTYPE_DECF34

1.0.0 (2019-10-02)
------------------

* NAPI 1.0.0 RC merged back to master 1.0.0 release
* Build documentation update

1.0.0-rc11 (2019-10-01)
-----------------------

* NodeJS version 6 dropped
* Input parameter array check added, fix #100
* Connection options support in Connection Pool, fix #104
* Build tools changed, node-gyp and node-pregyp replaced with cmake-js and prebuild, fix #72

1.0.0-rc10 (2019-05-31)
-----------------------

* Revert to node-pre-gyp@12.0, node-pre-gyp#463

1.0.0-rc9 (2019-05-23)
----------------------

* Dependencies clean-up, reducing peer dependencies
* READMEs and examples clean-up

1.0.0-rc8 (2019-05-22)
----------------------

* SAP NW RFC SDK loading error message
* jest test framework
* npm install --build-from-source fix #85
* tar security audit fix
* Option added to filter IMPORT or CHANGING parameters from the result set
* RFC_INT8 ABAP type support added
* .gitignore fix for vscode https://github.com/Microsoft/vscode-cpptools/issues/3347
* node v6 support dropped, v12 support added

1.0.0-rc7 (2018-12-10)
----------------------

* N-API, asynchronous and non-blocking
* Callback, promise, async/await API
* Connection pool
* Typescript and ES-next syntax support
* C/C++ style guide
* Error handling harmonisation
* Descriptive error when SAP NW RFC SDK shared lib not found
* String handling optimisation
* Tables processing harmonisation and memory consumption fix
* BYTE and XSTRING unicode encoding removed
* BCD and FLOAT accept strings, numbers or Decimal.js objects, configurable by options parameter
* client.options getter returns rstrip and bcd formatting options (string, number or function)
* More unit tests
* Empty fieldname removed from structures and tables (arrays)
* Darwin support (in process)
* README links update, from Service Marketplace to Support Portal

Incompatible changes:

* client.connectionInfo() gunction replaced by client.connectionInfo getter
* client.getVersion() replaced by client.version getter, format changed as well
* client.isAlive() replaced by client.isAlive getter
* XSTRING and BYTE types work with Buffers only

1.0.0-rc6 (2018-12-06)
----------------------

* N-API, asynchronous and non-blocking
* Callback, promise, async/await API
* Connection pool
* Typescript and ES-next syntax support
* C/C++ style guide
* Error handling harmonisation
* Descriptive error when SAP NW RFC SDK shared lib not found
* String handling optimisation
* Tables processing harmonisation and memory consumption fix
* BYTE and XSTRING unicode encoding removed
* BCD and FLOAT accept strings, numbers or Decimal.js objects
* client.getOptions() return rstrip and bcd output formatting options (string, number or function)
* More unit tests
* Empty fieldname removed from structures and tables (arrays)
* Darwin support (in process)
* README links update, from Service Marketplace to Support Portal

Incompatible changes:

* client.connectionInfo() gunction replaced by client.connectionInfo getter
* client.getVersion() replaced by client.version getter, format changed as well
* client.isAlive() replaced by client.isAlive getter
* XSTRING and BYTE types work with Buffers only

1.0.0-rc5 (2018-10-30)
----------------------

* N-API, asynchronous and non-blocking
* Callback, promise, async/await API
* Connection pool
* Typescript and ES-next syntax support
* C/C++ style guide
* Error handling harmonisation
* Descriptive error when SAP NW RFC SDK shared lib not found
* String handling optimisation
* Tables processing harmonisation and memory consumption fix
* BYTE and XSTRING unicode encoding removed
* BCD and FLOAT accept strings, numbers or Decimal.js objects, return numbers
* More unit tests
* Empty fieldname removed from structures and tables (arrays)
* Darwin support (in process)
* README links update, from Service Marketplace to Support Portal

Incompatible changes:

* client.connectionInfo() gunction replaced by client.connectionInfo getter
* client.getVersion() replaced by client.version getter, format changed as well
* client.isAlive() replaced by client.isAlive getter
* XSTRING and BYTE types work with Buffers only

0.1.16 (2018-27-04)
-------------------
- Decimal and Float input conversions #52 fix
- Decimal libraries support, like decimal.js

0.1.15 (2018-20-04)
-------------------

- Import parameters type check added
- Deprecated Nan::MakeCallback() replaced with Nan:Call()
- getVersion() returns an object instead of array, unit test added as well
- Skip not needed parameters (not "supplied" / "requested" on ABAP side)


0.1.14 (2018-04-03)
-------------------
- Memory leak fix [CRITICAL]
- Source code cleanup
- vscode settings for editing on Mac


0.1.13 (2017-12-05)
-------------------
- Catching constuctor errors
- Fix issue 35, libstdc++ location fix
- Tabs and formatting

0.1.12 (2017-11-29)
-------------------
- 4, 6 and 8 lts binaries
- byte arrays handling

0.1.11 (2017-01-13)
-------------------
- Deployment test, no changes

0.1.7 (2016-12-23)
------------------
- CI support

0.1.6 (2016-11-22)
------------------
- NAN for easier nodejs release independent development
- Fix issue 19, nodejs 6 support
- Fix issue 11, locking on Windows, by replacing the mutex with semaphore
- Fix issue 17, avoid binding.gyp manual editing on Windows

0.1.5 (2015-09-02)
------------------
- nodejs 0.12 api
- error handling

0.1.4 (2014-08-07)
------------------
- documentation fix
- Linux binary tested on Ubuntu 14.04


0.1.3 (2014-8-6)
----------------
- first release
